{"version":3,"sources":["components/Editor.js","hooks/useLocalStorage.js","components/App.js","index.js"],"names":["Editor","props","displayName","language","value","onChange","useState","open","setOpen","className","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lint","mode","theme","lineWrapping","smartIndent","lineNumbers","foldGutter","gutters","autoCloseTags","keyMap","matchBrackets","autoCloseBrackets","extraKeys","editorDidMount","setTimeout","refresh","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","clearTimeout","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oVAwEeA,EAlDA,SAACC,GAAW,IACjBC,EAA2CD,EAA3CC,YAAaC,EAA8BF,EAA9BE,SAAUC,EAAoBH,EAApBG,MAAOC,EAAaJ,EAAbI,SADd,EAGAC,oBAAS,GAHT,mBAGjBC,EAHiB,KAGXC,EAHW,KAQxB,OACE,yBAAKC,UAAS,2BAAsBF,EAAO,GAAK,cAC9C,yBAAKE,UAAU,gBACZP,EACD,4BACEO,UAAU,sBACVC,QAAS,kBAAMF,GAAQ,SAACG,GAAD,OAAeA,OAEtC,kBAAC,IAAD,CAAiBC,KAAML,EAAOM,IAAgBC,QAGlD,kBAAC,aAAD,CACEC,eAfe,SAACC,EAAQC,EAAMb,GAClCC,EAASD,IAeLA,MAAOA,EACPK,UAAU,sBACVS,QAAS,CACPC,MAAM,EACNC,KAAMjB,EACNkB,MAAO,WACPC,cAAc,EACdC,aAAa,EACbC,aAAa,EACbC,YAAY,EACZC,QAAS,CAAC,yBAA0B,yBACpCC,eAAe,EACfC,OAAQ,UACRC,eAAe,EACfC,mBAAmB,EACnBC,UAAW,CACT,aAAc,iBAGlBC,eAAgB,SAAChB,GACfiB,YAAW,WACTjB,EAAOkB,YACN,UCvCEC,EAtBS,SAACC,EAAKC,GAC5B,IAAMC,EAHO,iBAGgBF,EADgB,EAGnB9B,oBAAS,WACjC,IAAMiC,EAAYC,aAAaC,QAAQH,GAEvC,OAAkB,OAAdC,EAA2BG,KAAKC,MAAMJ,GAEd,oBAAjBF,EACFA,IAEAA,KAXkC,mBAGtCjC,EAHsC,KAG/BwC,EAH+B,KAmB7C,OAJAC,qBAAU,WACRL,aAAaM,QAAQR,EAAaI,KAAKK,UAAU3C,MAChD,CAACkC,EAAalC,IAEV,CAACA,EAAOwC,ICoCFI,MAvDf,WAAgB,IAAD,EACWb,EAAgB,OAAQ,IADnC,mBACNc,EADM,KACAC,EADA,OAESf,EAAgB,MAAO,IAFhC,mBAENgB,EAFM,KAEDC,EAFC,OAGOjB,EAAgB,KAAM,IAH7B,mBAGNkB,EAHM,KAGFC,EAHE,OAIehD,mBAAS,IAJxB,mBAINiD,EAJM,KAIEC,EAJF,KAmBb,OAbAX,qBAAU,WACR,IAAMY,EAAUxB,YAAW,WACzBuB,EAAU,iCAAD,OAECP,EAFD,mCAGEE,EAHF,qCAIGE,EAJH,sCAOR,KACH,OAAO,kBAAMK,aAAaD,MACzB,CAACR,EAAME,EAAKE,IAGb,oCACE,yBAAK5C,UAAU,iBACb,kBAAC,EAAD,CACEN,SAAS,MACTD,YAAY,OACZE,MAAO6C,EACP5C,SAAU6C,IAEZ,kBAAC,EAAD,CACE/C,SAAS,MACTD,YAAY,MACZE,MAAO+C,EACP9C,SAAU+C,IAEZ,kBAAC,EAAD,CACEjD,SAAS,aACTD,YAAY,KACZE,MAAOiD,EACPhD,SAAUiD,KAGd,yBAAK7C,UAAU,QACb,4BACEkD,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,OACPR,OAAQA,OC/ClBS,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.d16bc2fc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\nimport \"codemirror/mode/xml/xml\";\nimport \"codemirror/mode/css/css\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/addon/hint/show-hint\";\nimport \"codemirror/addon/hint/javascript-hint\";\nimport \"codemirror/addon/hint/show-hint.css\";\nimport \"codemirror/addon/hint/anyword-hint\";\nimport \"codemirror/keymap/sublime\";\nimport \"codemirror/addon/edit/closebrackets\";\nimport \"codemirror/addon/edit/closetag\";\nimport \"codemirror/addon/fold/foldcode\";\nimport \"codemirror/addon/fold/foldgutter\";\nimport \"codemirror/addon/fold/brace-fold\";\nimport \"codemirror/addon/fold/comment-fold\";\nimport \"codemirror/addon/fold/foldgutter.css\";\nimport { Controlled as ControlledEditor } from \"react-codemirror2\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCompressAlt, faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Editor = (props) => {\n  const { displayName, language, value, onChange } = props;\n\n  const [open, setOpen] = useState(true);\n\n  const handleChange = (editor, data, value) => {\n    onChange(value);\n  };\n  return (\n    <div className={`editor-container ${open ? \"\" : \"collapsed\"}`}>\n      <div className=\"editor-title\">\n        {displayName}\n        <button\n          className=\"expand-collapse-btn\"\n          onClick={() => setOpen((prevOpen) => !prevOpen)}\n        >\n          <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\n        </button>\n      </div>\n      <ControlledEditor\n        onBeforeChange={handleChange}\n        value={value}\n        className=\"code-mirror-wrapper\"\n        options={{\n          lint: true,\n          mode: language,\n          theme: \"material\",\n          lineWrapping: true,\n          smartIndent: true,\n          lineNumbers: true,\n          foldGutter: true,\n          gutters: [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\n          autoCloseTags: true,\n          keyMap: \"sublime\",\n          matchBrackets: true,\n          autoCloseBrackets: true,\n          extraKeys: {\n            \"Ctrl+Space\": \"autocomplete\",\n          },\n        }}\n        editorDidMount={(editor) => {\n          setTimeout(() => {\n            editor.refresh();\n          }, 400);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Editor;\n","import { useEffect, useState } from \"react\";\n\nconst PREFIX = \"codepen-clone-\";\n\nconst useLocalStorage = (key, initialValue) => {\n  const prefixedKey = PREFIX + key;\n\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey);\n\n    if (jsonValue !== null) return JSON.parse(jsonValue);\n\n    if (typeof initialValue === \"function\") {\n      return initialValue();\n    } else {\n      return initialValue;\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\n  }, [prefixedKey, value]);\n\n  return [value, setValue];\n};\n\nexport default useLocalStorage;\n","import React, { useEffect, useState } from \"react\";\nimport Editor from \"./Editor\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nfunction App() {\n  const [html, setHtml] = useLocalStorage(\"html\", \"\");\n  const [css, setCss] = useLocalStorage(\"css\", \"\");\n  const [js, setJs] = useLocalStorage(\"js\", \"\");\n  const [srcDoc, setSrcDoc] = useState(\"\");\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setSrcDoc(`\n      <html>\n        <body>${html}</body>\n        <style>${css}</style>\n        <script>${js}</script>\n      </html>\n    `);\n    }, 250);\n    return () => clearTimeout(timeout);\n  }, [html, css, js]);\n\n  return (\n    <>\n      <div className=\"pane top-pane\">\n        <Editor\n          language=\"xml\"\n          displayName=\"HTML\"\n          value={html}\n          onChange={setHtml}\n        />\n        <Editor\n          language=\"css\"\n          displayName=\"CSS\"\n          value={css}\n          onChange={setCss}\n        />\n        <Editor\n          language=\"javascript\"\n          displayName=\"JS\"\n          value={js}\n          onChange={setJs}\n        />\n      </div>\n      <div className=\"pane\">\n        <iframe\n          title=\"output\"\n          sandbox=\"allow-scripts\"\n          frameBorder=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n          srcDoc={srcDoc}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}